{"version":3,"sources":["Experiments/Siemens/Assets/FCB-AWAY-HWT_01.gltf","Experiments/ModelViewer/assets/Vinyl-Room-01.glb","Experiments/Playground/Assets/alien.glb","logo.svg","Experiments/Playground/Animation101.js","Experiments/Playground/LoadGtltfModel.js","Experiments/ThreeJS/FirstScene/first-scene.component.jsx","Experiments/ModelViewer/model-viewer-carousel.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","createScene","scene","canvas","getEngine","getRenderingCanvas","BABYLON","Zero","attachControl","box1","CreateBox","position","x","box2","materialBox","diffuseColor","materialBox2","material","animationBox","ANIMATIONTYPE_FLOAT","ANIMATIONLOOPMODE_CYCLE","keys","push","frame","value","setKeys","animations","beginAnimation","setInterval","Math","random","Animation101","antialias","onSceneReady","id","className","Append","process","newMeshes","createDefaultCameraOrLight","activeCamera","alpha","PI","onRender","LoadGtltfModel","Component","buildModelViewer","src","alt","ar","loading","camera-controls","auto-rotate","autoplay","ModelViewerCarousel","currentViewIndex","viewSelection","shirt","room","alien","state","view","nextView","length","console","log","setState","clearTimeout","timer","setTimeout","this","React","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f30e2dcc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/FCB-AWAY-HWT_01.cbc64281.gltf\";","module.exports = __webpack_public_path__ + \"static/media/Vinyl-Room-01.7b3bb128.glb\";","module.exports = __webpack_public_path__ + \"static/media/alien.041d045b.glb\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport * as BABYLON from '@babylonjs/core';\r\n import SceneComponent from 'babylonjs-hook'; \r\n\r\nconst createScene = scene => {\r\n    const canvas = scene.getEngine().getRenderingCanvas();\r\n    var light = new BABYLON.PointLight(\"Omni\", new BABYLON.Vector3(0, 100, 100), scene);\r\n    var camera = new BABYLON.ArcRotateCamera(\"Camera\", 0, 0.8, 100, new BABYLON.Vector3.Zero(), scene);\r\n    camera.attachControl(canvas, true);\r\n\r\n    //Boxes\r\n    var box1 = BABYLON.Mesh.CreateBox(\"Box1\", 10.0, scene);\r\n    box1.position.x = -20;\r\n    var box2 = BABYLON.Mesh.CreateBox(\"Box2\", 10.0, scene);\r\n\r\n    var materialBox = new BABYLON.StandardMaterial(\"texture1\", scene);\r\n    materialBox.diffuseColor = new BABYLON.Color3(0, 1, 0);//Green\r\n    var materialBox2 = new BABYLON.StandardMaterial(\"texture2\", scene);\r\n\r\n    //Applying materials\r\n    box1.material = materialBox;\r\n    box2.material = materialBox2;\r\n\r\n    //Positioning box\r\n    box2.position.x = 20;\r\n\r\n    // Creation of a basic animation with box 1\r\n    //----------------------------------------\r\n\r\n    //Create a scaling animation at 30 FPS\r\n    var animationBox = new BABYLON.Animation(\"tutoAnimation\", \"scaling.x\", 30, BABYLON.Animation.ANIMATIONTYPE_FLOAT,\r\n                                                                    BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);\r\n    //Here we have chosen a loop mode, but you can change to :\r\n    //  Use previous values and increment it (BABYLON.Animation.ANIMATIONLOOPMODE_RELATIVE)\r\n    //  Restart from initial value (BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE)\r\n    //  Keep the final value (BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT)\r\n\r\n    // Animation keys\r\n    var keys = [];\r\n    //At the animation key 0, the value of scaling is \"1\"\r\n    keys.push({\r\n        frame: 0,\r\n        value: 1\r\n    });\r\n\r\n    //At the animation key 20, the value of scaling is \"0.2\"\r\n    keys.push({\r\n        frame: 20,\r\n        value: 0.2\r\n    });\r\n\r\n    //At the animation key 100, the value of scaling is \"1\"\r\n    keys.push({\r\n        frame: 100,\r\n        value: 1\r\n    });\r\n\r\n    //Adding keys to the animation object\r\n    animationBox.setKeys(keys);\r\n\r\n    //Then add the animation object to box1\r\n    box1.animations.push(animationBox);\r\n\r\n    //Finally, launch animations on box1, from key 0 to key 100 with loop activated\r\n    scene.beginAnimation(box1, 0, 100, true);\r\n\r\n    // Creation of a manual animation with box 2\r\n    //------------------------------------------\r\n    setInterval(function () {\r\n\r\n        //The color is defined at run time with random()\r\n        box2.material.diffuseColor = new BABYLON.Color3(Math.random(), Math.random(), Math.random());\r\n\r\n    }, 1000);\r\n\r\n  \r\n}\r\n\r\nconst Animation101 = () => \r\n{\r\n    return (\r\n    <div>\r\n      <SceneComponent antialias onSceneReady={createScene}  id='my-canvas' className=\"my-canvas\"/>\r\n    </div>)\r\n}\r\nexport default Animation101","import React from 'react';\r\nimport * as BABYLON from '@babylonjs/core';\r\nimport SceneComponent from 'babylonjs-hook'; \r\nimport '@babylonjs/loaders'\r\n\r\n\r\nconst createScene = scene => {\r\n    const canvas = scene.getEngine().getRenderingCanvas();\r\n    var camera = new BABYLON.ArcRotateCamera(\"Camera\", 0, 0.8, 100, new BABYLON.Vector3.Zero(), scene);\r\n    camera.attachControl(canvas, true);\r\n\r\n    debugger;\r\n    BABYLON.SceneLoader.Append(`${process.env.PUBLIC_URL}/assets/`, \"alien.glb\", scene, function (newMeshes) {\r\n        debugger;\r\n        scene.createDefaultCameraOrLight(true);\r\n        scene.activeCamera.attachControl(canvas, false);\r\n        scene.activeCamera.alpha += Math.PI; // camera +180Â°\r\n    });\r\n\r\n}\r\n\r\nconst onRender = scene => {\r\n    \r\n}\r\n\r\nconst LoadGtltfModel = () => \r\n{\r\n    return (\r\n    <div>\r\n      <SceneComponent antialias onSceneReady={createScene} onRender={onRender} id='my-canvas' className=\"my-canvas\"/>\r\n    </div>)\r\n}\r\nexport default LoadGtltfModel","import React, { Component } from 'react'\r\nimport * as THREE from 'three'\r\n\r\nexport default class FirstScene extends Component {\r\n\r\n    scene = null;\r\n    camera = null;\r\n    renderer = null;\r\n    cube = null;\r\n\r\n    adder = 0.05;\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.scene = new THREE.Scene();\r\n        this.scene.background = new THREE.Color(0xffabab);\r\n\r\n        this.camera = new THREE.PerspectiveCamera(30,\r\n                        window.innerWidth / window.innerHeight,\r\n                        1, 1000);\r\n        this.camera.position.z = 5;\r\n\r\n       //this.setState({scene: this.scene, camera:this.camera});\r\n\r\n        this.renderer = new THREE.WebGLRenderer();\r\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n        \r\n        window.addEventListener('resize', this.onWindowResize);\r\n\r\n        document.body.appendChild(this.renderer.domElement);\r\n        this.createCube();\r\n        this.mainloop();\r\n    }\r\n\r\n    onWindowResize= () => {\r\n\r\n        this.camera.aspect = window.innerWidth / window.innerHeight;\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        this.renderer.setSize( window.innerWidth, window.innerHeight );\r\n\r\n    }\r\n\r\n    mainloop = () =>{\r\n       // this.setState({scene: this.scene, camera:this.camera})\r\n        this.cube.position.y+= this.adder;\r\n        if(this.cube.position.y>1 || this.cube.position.y<-1) this.adder *= -1;\r\n        this.renderer.render(this.scene, this.camera);\r\n        requestAnimationFrame(this.mainloop);\r\n    }\r\n\r\n    createCube = () =>{\r\n        let geometry = new THREE.BoxGeometry(1,1,1);\r\n        let material = new THREE.MeshBasicMaterial({color:0x00a1cb});\r\n        this.cube = new THREE.Mesh(geometry, material);\r\n        this.scene.add(this.cube);\r\n    }\r\n\r\n    cubeLeft=()=>{\r\n        this.cube.position.x -= 0.1;\r\n    }\r\n    cubeRight=()=>{\r\n        this.cube.position.x += 0.1;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={ref => (this.mount = ref)} style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\"\r\n            }}>\r\n                <button onClick={this.cubeLeft} style={{\r\n                    width: \"50%\"\r\n                }}>LEFT</button>\r\n                \r\n                <button onClick={this.cubeRight} style={{\r\n                    width: \"50%\"\r\n                }}>RIGHT</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport '@google/model-viewer'\r\nimport shirt from '../Siemens/Assets/FCB-AWAY-HWT_01.gltf'\r\nimport room from './assets/Vinyl-Room-01.glb'\r\nimport alien from '../Playground/Assets/alien.glb'\r\n\r\nimport './model-viewer.styles.css'\r\n\r\nconst buildModelViewer = (src) => (<model-viewer\r\n        \r\n        className = 'model'\r\n        src={src}\r\n        alt='model name'\r\n        ar\r\n        loading='lazy'\r\n        camera-controls\r\n        auto-rotate\r\n        autoplay>\r\n        </model-viewer>)\r\n\r\n\r\n\r\nclass ModelViewerCarousel extends React.Component {\r\n    \r\n    currentViewIndex = 0;\r\n\r\n    viewSelection = [buildModelViewer(shirt), \r\n        buildModelViewer(room), \r\n        buildModelViewer(alien)];\r\n\r\n    state = {\r\n        view: this.viewSelection[0]\r\n    }\r\n\r\n\r\n    nextView=()=>{\r\n        this.currentViewIndex++;\r\n        if(this.currentViewIndex>=this.viewSelection.length){\r\n            this.currentViewIndex = 0;\r\n        }\r\n        console.log(\"idx\",this.currentViewIndex);\r\n        this.setState({view:this.viewSelection[this.currentViewIndex]});\r\n        clearTimeout(this.timer);\r\n        this.timer = setTimeout(this.nextView, 20000);\r\n    }\r\n    \r\n    timer = setTimeout(this.nextView, 20000);\r\n\r\n    render(){\r\n    return (\r\n        <div className='model-holder'>\r\n        {this.state.view}\r\n        </div>\r\n    )}\r\n}\r\n\r\nexport default ModelViewerCarousel;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Animation101 from './Experiments/Playground/Animation101'\nimport LoadGtltfModel from './Experiments/Playground/LoadGtltfModel'\nimport {BrowserReact, BrowserRouter, Route, Switch} from 'react-router-dom'\nimport FirstScene from './Experiments/ThreeJS/FirstScene/first-scene.component'\nimport ModelViewerCarousel from './Experiments/ModelViewer/model-viewer-carousel.component';\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Switch>\n            <Route exact path='/' component={ModelViewerCarousel} />\n            <Route exact path='/super-media-bros' component={ModelViewerCarousel} />\n            <Route path='/Animation101' component={Animation101} />\n            <Route path='/LoadGtltfModel' component={LoadGtltfModel} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}